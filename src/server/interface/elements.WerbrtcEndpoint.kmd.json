{
  "remoteClasses": [
    {
      "name": "WebRtcEndpoint",
      "extends": "BaseRtpEndpoint",
      "doc": "WebRtcEndpoint interface. This type of ``Endpoint`` offers media streaming using WebRTC.",
      "properties": [
        {
          "name": "stunServerAddress",
          "doc": "Address of the STUN server (Only IP address are supported)",
          "type": "String"
        },
        {
          "name": "stunServerPort",
          "doc": "Port of the STUN server",
          "type": "int"
        },
        {
          "name": "turnUrl",
          "doc": "TURN server URL with this format: 'user:password@address:port(?transport=[udp|tcp|tls])'.\n'address' must be an IP (not a domain).\n'transport' is optional (UDP by default).",
          "type": "String"
        },
        {
          "name": "ICECandidatePairs",
          "doc": "The ICE candidate pair used by the ice library for each stream.",
          "type": "IceCandidatePair[]",
          "readOnly": true
        }
      ],
      "constructor":
        {
          "doc": "Builder for the :rom:cls:`WebRtcEndpoint`",
          "params": [
            {
              "name": "mediaPipeline",
              "doc": "the :rom:cls:`MediaPipeline` to which the endpoint belongs",
              "type": "MediaPipeline"
            },
            {
              "name": "useDataChannels",
              "doc": "Activate data channels support",
              "type": "boolean",
              "optional": true,
              "defaultValue": false
            }
          ]
        },
      "methods": [
        {
          "name": "gatherCandidates",
          "doc": "Init the gathering of ICE candidates.\nIt must be called after SdpEndpoint::generateOffer or SdpEndpoint::processOffer",
          "params": []
        },
        {
          "name": "addIceCandidate",
          "doc": "Provide a remote ICE candidate",
          "params": [
            {
              "name": "candidate",
              "doc": "Remote ICE candidate",
              "type": "IceCandidate"
            }
          ]
        },
        {
          "name": "createDataChannel",
          "doc": "Create a new data channel if data channel are supported",
          "params": [
            {
              "name": "label",
              "doc": "Channel's label attribute",
              "type": "String",
              "defaultValue": "",
              "optional": true
            },
            {
              "name": "ordered",
              "doc": "If the data channel should guarantee order or not",
              "type": "boolean",
              "defaultValue": true,
              "optional": true
            },
            {
              "name": "maxPacketLifeTime",
              "doc": "the length of the time window (in milliseconds) during which transmissions and retransmissions may occur in unreliable mode",
              "type": "int",
              "defaultValue": -1,
              "optional": true
            },
            {
              "name": "maxRetransmits",
              "doc": "maximum number of retransmissions that are attempted in unreliable mode",
              "type": "int",
              "defaultValue": -1,
              "optional": true
            },
            {
              "name": "protocol",
              "doc": "the name of the sub-protocol used",
              "type": "String",
              "defaultValue": "",
              "optional": true
            }
          ]
        },
        {
          "name": "closeDataChannel",
          "doc": "Close an opened data channel",
          "params": [
            {
              "name": "channelId",
              "doc": "The channel identifier",
              "type": "int"
            }
          ]
        }
      ],
      "events": [
        "OnIceCandidate",
        "OnIceGatheringDone",
        "OnIceComponentStateChanged",
        "OnDataChannelOpened",
        "OnDataChannelClosed",
        "NewCandidatePairSelected"
      ]
    }
  ],
  "events": [
    {
      "name": "OnIceCandidate",
      "extends": "Media",
      "doc": "Notify of a new gathered local candidate.",
      "properties": [
        {
          "name": "candidate",
          "doc": "New gathered local candidate",
          "type": "IceCandidate"
        }
      ]
    },
    {
      "name": "OnIceGatheringDone",
      "extends": "Media",
      "doc": "Notify that all candidates have been gathered.",
      "properties": []
    },
    {
      "name": "OnIceComponentStateChanged",
      "extends": "Media",
      "doc": "Notify about the change of an ICE component state.",
      "properties": [
        {
          "name": "streamId",
          "doc": "The ID of the stream",
          "type": "int"
        },
        {
          "name": "componentId",
          "doc": "The ID of the component",
          "type": "int"
        },
        {
          "name": "state",
          "doc": "The state of the component",
          "type": "IceComponentState"
        }
      ]
    },
    {
      "name": "OnDataChannelOpened",
      "doc": "Notify the creation of a new data channel.",
      "extends": "Media",
      "properties": [
        {
          "name": "channelId",
          "doc": "The channel identifier",
          "type": "int"
        }
      ]
    },
    {
      "name": "OnDataChannelClosed",
      "doc": "Notify the destruction of a data channel.",
      "extends": "Media",
      "properties": [
        {
          "name": "channelId",
          "doc": "The channel identifier",
          "type": "int"
        }
      ]
    },
    {
      "name": "NewCandidatePairSelected",
      "doc": "Notify of the new pair of ICE candidates used by the ice library.",
      "extends": "Media",
      "properties": [
        {
          "name": "candidatePair",
          "doc": "The new pair of candidates",
          "type": "IceCandidatePair"
        }
      ]
    }
  ],
  "complexTypes": [
    {
      "typeFormat": "REGISTER",
      "name": "IceCandidate",
      "doc": "IceCandidate representation based on standard (http://www.w3.org/TR/webrtc/#rtcicecandidate-type).",
      "properties": [
        {
          "name": "candidate",
          "doc": "The candidate-attribute as defined in section 15.1 of ICE (rfc5245).",
          "type": "String"
        },
        {
          "name": "sdpMid",
          "doc": "If present, this contains the identifier of the 'media stream identification'.",
          "type": "String"
        },
        {
          "name": "sdpMLineIndex",
          "doc": "The index (starting at zero) of the m-line in the SDP this candidate is associated with.",
          "type": "int"
        }
      ]
    },
    {
      "name": "IceComponentState",
      "typeFormat": "ENUM",
      "doc": "States of an ICE component.",
      "values": [
        "DISCONNECTED",
        "GATHERING",
        "CONNECTING",
        "CONNECTED",
        "READY",
        "FAILED"
      ]
    },
    {
      "typeFormat": "REGISTER",
      "name": "IceCandidatePair",
      "doc": "The ICE candidate pair used by the ice library.",
      "properties": [
        {
          "name": "streamID",
          "doc": "Stream ID of the ice connection",
          "type": "String"
        },
        {
          "name": "componentID",
          "doc": "Component ID of the ice connection",
          "type": "int"
        },
        {
          "name": "localCandidate",
          "doc": "The local candidate used by the ice library.",
          "type": "String"
        },
        {
          "name": "remoteCandidate",
          "doc": "The remote candidate used by the ice library.",
          "type": "String"
        }
      ]
    }
  ]
}
