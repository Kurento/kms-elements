{
  "remoteClasses": [
    {
      "name": "PlayerEndpoint",
      "extends": "UriEndpoint",
      "doc": "
      <p>
      Retrieves content from seekable or non-seekable sources, and injects them into :term:`KMS`, so they can be delivered to any Filter or Endpoint in the same MediaPipeline. Following URI schemas are supported:
      <ul>
        <li>
          Files: Mounted in the local file system.
          <ul><li>file:///path/to/file</li></ul>
        </li>
        <li>
          RTSP: Those of IP cameras would be a good example.
          <ul>
            <li>rtsp://<server-ip></li>
            <li>rtsp://username:password@<server-ip></li>
          </ul>
        </li>
        <li>
          HTTP: Any file available in an HTTP server
          <ul>
            <li>http(s)://<server-ip>/path/to/file</li>
            <li>http(s)://username:password@<server-ip>/path/to/file</li>
          </ul>
        </li>
      </ul>
      </p>
      <p>
      For the player to stream the contents of the file, the server must have access to the resource. In case of local files, the user running the process must have read permissions over the file. For network resources, the path to the resource must be accessible: IP and port access not blocked, correct credentials, etc.The resource location can’t be changed after the player is created, and a new player should be created for streaming a different resource.
      </p>
      <p>
      The list of valid operations is
      <ul>
        <li>*play*: starts streaming media. If invoked after pause, it will resume playback.</li>
        <li>*stop*: stops streaming media. If play is invoked afterwards, the file will be streamed from the beginning.</li>
        <li>*pause*: pauses media streaming. Play must be invoked in order to resume playback.</li>
        <li>*seek*: If the source supports “jumps” in the timeline, then the PlayerEndpoint can
          <ul>
            <li>*setPosition*: allows to set the position in the file.</li>
            <li>*getPosition*: returns the current position being streamed.</li>
          </ul>
        </li>
      </ul>
      </p>
      <p>
      <h2>Events fired:</h2>
      <ul><li>EndOfStreamEvent: If the file is streamed completely.</li></ul>
      </p>
      ",
      "constructor":
        {
          "doc": "Create a PlayerEndpoint",
          "params": [
            {
              "name": "mediaPipeline",
              "doc": "The :rom:cls:`MediaPipeline` this PlayerEndpoint belongs to.",
              "type": "MediaPipeline"
            },
            {
              "name": "uri",
              "doc": "URI pointing to the video. It has to be accessible to the KMS process.
              <ul>
                <li>Local resources: The user running the Kurento Media Server must have read permission over the file.</li>
                <li>Remote resources: Must be accessible from the server where the media server is running.</li>
              </ul>",
              "type": "String"
            },
            {
              "name": "useEncodedMedia",
              "doc": "use encoded instead of raw media. If the parameter is false then the element uses raw media. Changing this parameter can affect stability severely, as lost key frames will not be regenerated. Enabling this flag does not affect the overall behaviour, but has an impact in performance (just in case where original media and target media are the same). It will help solve the problem with lost key frames. We strongly recommended not to use this parameter because correct behaviour is not guarantied.",
              "type": "boolean",
              "optional": true,
              "defaultValue": false
            },
            {
              "name": "networkCache",
              "doc": "When using rtsp sources. Amount of ms to buffer",
              "type": "int",
              "optional": true,
              "defaultValue": 2000
            }
          ]
        },
      "properties": [
        {
          "name": "videoInfo",
          "doc": "Returns info about the source being played",
          "type": "VideoInfo",
          "readOnly": true
        },
        {
          "name": "elementGstreamerDot",
          "doc": "Returns the Gstreamer DOT string for this element's private pipeline",
          "type": "String",
          "readOnly": true
        },
        {
          "name": "position",
          "doc": "Get or set the actual position of the video in ms. .. note:: Setting the position only works for seekable videos",
          "type": "int64"
        }
      ],
      "methods": [
        {
          "name": "play",
          "doc": "Starts reproducing the media, sending it to the :rom:cls:`MediaSource`. If the endpoint\n
          has been connected to other endpoints, those will start receiving media.",
          "params": []
        }
      ],
      "events": [
        "EndOfStream"
      ]
    }
  ],
  "complexTypes": [
    {
      "name": "VideoInfo",
      "typeFormat": "REGISTER",
      "doc": "",
      "properties": [
        {
          "name": "isSeekable",
          "doc": "Seek is possible in video source",
          "type": "boolean"
        },
        {
          "name": "seekableInit",
          "doc": "First video position to do seek in ms",
          "type": "int64"
        },
        {
          "name": "seekableEnd",
          "doc": "Last video position to do seek in ms",
          "type": "int64"
        },
        {
          "name": "duration",
          "doc": "Video duration in ms",
          "type": "int64"
        }
      ]
    }
  ]
}
