{
  "remoteClasses": [
    {
      "name": "RecorderEndpoint",
      "extends": "UriEndpoint",
      "doc": "Provides function to store contents in reliable mode (doesn't discard data). It contains :rom:cls:`MediaSink` pads for audio and video.",
      "constructor":
        {
          "doc": "",
          "params": [
            {
              "name": "mediaPipeline",
              "doc": "the :rom:cls:`MediaPipeline` to which the endpoint belongs",
              "type": "MediaPipeline"
            },
            {
              "name": "uri",
              "doc": "URI where the recording will be stored",
              "type": "String"
            },
            {
              "name": "mediaProfile",
              "doc": "Choose either one of the values defined in :rom:attr:`MediaProfileSpecType` as profile for recording",
              "type": "MediaProfileSpecType",
              "optional": true,
              "defaultValue": "WEBM"
            },
            {
              "name": "stopOnEndOfStream",
              "doc": "Forces the recorder endpoint to finish processing data when an :term:`EOS` is detected in the stream",
              "type": "boolean",
              "optional": true,
              "defaultValue": false
            }
          ]
        },
      "methods": [
        {
          "name": "record",
          "doc": "Starts storing media received through the :rom:cls:`MediaSink` pad",
          "params": []
        },
        {
          "name": "stopAndWait",
          "doc": "Stops recording and do not returns until all the content has bee written to the selected uri. This can cause timeouts on some clients if there is too much content to write and/or the transport is slow",
          "params": []
        }
      ],
      "events": [
        "Recording",
        "Paused",
        "Stopped"
      ]
    }
  ],
  "events": [
    {
      "name": "Recording",
      "extends": "Media",
      "doc": "Raised when the recoding effectively starts. ie: Media is received by the recorder once record method has been called.",
      "properties": []
    },
    {
      "name": "Paused",
      "extends": "Media",
      "doc": "Raised when the recorder goes to pause state",
      "properties": []
    },
    {
      "name": "Stopped",
      "extends": "Media",
      "doc": "Raised when the recorder has been stopped and all the media has been written to storage.",
      "properties": []
    }
  ]
}
